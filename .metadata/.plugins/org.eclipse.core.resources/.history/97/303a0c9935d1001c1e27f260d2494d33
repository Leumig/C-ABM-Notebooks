/*
 * Trabajo.c
 *
 *  Created on: 11 may. 2022
 *      Author: JUNMI
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "Trabajo.h"
#include "Servicio.h"
#include "Notebook.h"
#include "Marca.h"
#include "Tipo.h"
#include "Menu.h"
#include "Validaciones.h"


int mostrarTrabajo(eTrabajo lista, eNotebook notebooks[], int tamNot, eServicio servicios[], int tamSer)
{
    int todoOk = 0;
    char descServicio[20];

    if(notebooks != NULL && tamNot > 0 && servicios != NULL && tamSer > 0)
    {

    //cargarDescripcionMarca(marcas, tamMar, lista.idMarca, descMarca);
    cargarDescripcionServicio(servicios, tamSer, lista.idServicio, descServicio);
    //Le pasamos lista.idSector para que la función sepa cuál ID de sector tiene que buscar, si es correcta y la encuentra,
    //nos devuelve un char de descripción en el parámetro 'descSector'


    printf("  %4d  %5d  %10s  %10s     %02d/%02d/%d\n",
    		lista.id, lista.idNotebook, lista.idServicio, lista.fPactada);

        todoOk = 1;
    }
    return todoOk;
}

int listarTrabajos(eTrabajo vec[], eNotebook notebooks[], int tamNot, eServicio servicios[], int tamSer)
{
    int todoOk = 0;
    int flag = 0;
    if(vec != NULL && notebooks != NULL && tamNot > 0 && servicios != NULL && tamSer > 0)
    {
        printf("          *** Listado de Trabajos ***\n\n");
        printf("   ID             Notebook       Servicio       Fecha Pactada    \n");
        printf("-----------------------------------------------------------------\n");
        for(int i=0; i < 10; i++) // Recorro
        {
            if( !vec[i].isEmpty ) //Si paso por un empleado que no está vacio...
            {
                mostrarNotebook(vec[i], marcas, tamMar, tipos, tamTip);   //Lo muestro. (Le paso el vector con el indice y la estructura
                flag++;										 //de sectores con el tam para poder mostrar el Sector)
            }//La flag es para saber si ya hay mínimo 1 empleado
        }
        if(flag == 0) //Si no hay mínimo 1 empleado... printeo que no hay
        {
            printf("     No hay notebooks en el sistema");
        }
        printf("\n\n");

        todoOk = 1;
    }
    return todoOk;
}

int altaTrabajo(eTrabajo vec[], int tam, int* pId, eNotebook notebooks[], int tamNot, eServicio servicios[], int tamSer)
{                      //Recibe las estructuras con sus tam y un puntero a Legajo (ID)
    int todoOk = 0;
    int indice;   // Este va a ser indice al que le vamos a cargar todos los datos
    char auxCad[100];
    eNotebook nuevaNotebook; //Aca vamos a cargar los datos
    int validPrecio = 0;

    if(vec != NULL && tam > 0 && pId != NULL && marcas != NULL && tamMar > 0 && tipos != NULL && tamTip > 0)
    {
        if(buscarNotebookLibre(vec, tam, &indice)) //Buscamos un lugar donde podamos cargar datos (isEmpty == 1)
        {
            if(indice == -1) //Si no encontro lugar libre...
            {
                printf("No hay lugar en el sistema\n");
            }
            else
            {
                // Si encontro lugar libre ya empiezo a pedir y cargar datos:

 /*MODELO*/     printf("Ingrese el modelo de la Notebook: ");
                fflush(stdin);
                gets(auxCad);
                validarPalabra(auxCad);
				strcpy(nuevaNotebook.modelo, auxCad);


/*MARCA*/       listarMarcas(marcas, tamMar); //Primero muestro los sectores

			    printf("Ingrese la ID de la marca a la que pertenece: ");
				scanf("%d", &nuevaNotebook.idMarca);

				while(!validarMarca(marcas, tamMar, nuevaNotebook.idMarca))
				{
					printf("Error, esa ID no corresponde a ninguna marca. Reingrese ID: ");
					fflush(stdin);
					scanf("%d", &nuevaNotebook.idMarca);
				}

/*TIPOS*/       listarTipos(tipos, tamTip); //Primero muestro los sectores

				printf("Ingrese la ID del tipo al que pertenece: ");
				scanf("%d", &nuevaNotebook.idTipo);

				while(!validarTipo(tipos, tamTip, nuevaNotebook.idTipo))
				{
					printf("Error, esa ID no corresponde a ningún tipo. Reingrese ID: ");
					fflush(stdin);
					scanf("%d", &nuevaNotebook.idTipo);
				}


/*PRECIO*/      printf("Ingrese precio: ");
				validPrecio = scanf("%f", &nuevaNotebook.precio);
                validarFloat(validPrecio, &nuevaNotebook.precio);


                nuevaNotebook.isEmpty = 0; //Pongo el isEmpty en 0 (ya no esta libre)
                nuevaNotebook.id = *pId; //El legajo va a ser el que recibimos del main
                *pId = *pId + 1; //Ahora el legajo que recibimos del main, aumenta +1, para cargarselo al proximo
                vec[indice] = nuevaNotebook; //Finalmente le pasamos todos los datos que cargamos, a la estructura real
                todoOk = 1;
            }
        }
        else
        {
            printf("Ocurrio un problema con los parámetros\n");
        }
    }
    return todoOk;
}
